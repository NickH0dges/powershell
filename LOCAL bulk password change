# Designed by Nick Hodges
# https://linkedin.com/in/nick-hodges/
# This script prompts the user to enter a password and applies it to all local user accounts, 
# except for the currently logged-in account, to prevent a lockout. The script also includes options 
# to show the password in plaintext and copy it to the clipboard after submission.

Add-Type -AssemblyName System.Windows.Forms

# Create a form
$form = New-Object System.Windows.Forms.Form
$form.Text = "Set Password for All Users"
$form.Size = New-Object System.Drawing.Size(400,200)
$form.StartPosition = "CenterScreen"

# Create a label
$label = New-Object System.Windows.Forms.Label
$label.Text = "Enter the new password:"
$label.AutoSize = $true
$label.Location = New-Object System.Drawing.Point(10,20)
$form.Controls.Add($label)

# Create a textbox for password input
$passwordBox = New-Object System.Windows.Forms.TextBox
$passwordBox.Location = New-Object System.Drawing.Point(150, 18)
$passwordBox.Size = New-Object System.Drawing.Size(200,20)
$passwordBox.UseSystemPasswordChar = $true
$form.Controls.Add($passwordBox)

# Create a checkbox to show/hide the password
$showPasswordCheckBox = New-Object System.Windows.Forms.CheckBox
$showPasswordCheckBox.Text = "Show Password"
$showPasswordCheckBox.AutoSize = $true
$showPasswordCheckBox.Location = New-Object System.Drawing.Point(150,50)
$showPasswordCheckBox.Add_CheckStateChanged({
    $passwordBox.UseSystemPasswordChar = -not $showPasswordCheckBox.Checked
})
$form.Controls.Add($showPasswordCheckBox)

# Create an OK button
$okButton = New-Object System.Windows.Forms.Button
$okButton.Text = "OK"
$okButton.Location = New-Object System.Drawing.Point(150,80)
$okButton.DialogResult = [System.Windows.Forms.DialogResult]::OK
$form.AcceptButton = $okButton
$form.Controls.Add($okButton)

# Show the form
$result = $form.ShowDialog()

# Handle if the form is closed or if the password is empty
if ($result -ne [System.Windows.Forms.DialogResult]::OK -or [string]::IsNullOrEmpty($passwordBox.Text)) {
    Write-Host "No password entered or form was closed. Exiting script."
    exit
}

# Retrieve the password from the textbox
$password = $passwordBox.Text

# Ask the user if they want to copy the password
$copyPasswordResponse = [System.Windows.Forms.MessageBox]::Show("Would you like to copy the password to the clipboard?", "Copy Password", [System.Windows.Forms.MessageBoxButtons]::YesNo)

# Copy the password to the clipboard if the user selects Yes
if ($copyPasswordResponse -eq [System.Windows.Forms.DialogResult]::Yes) {
    Set-Clipboard -Value $password
    Write-Host "Password has been copied to the clipboard."
}

# Convert the password to a secure string
$securePassword = ConvertTo-SecureString -AsPlainText $password -Force

# Get the currently logged-in user's name
$currentLoggedInUser = $env:USERNAME

# Get a list of all local user accounts
$users = Get-LocalUser

# Loop through each user and change their password, skipping only the currently logged-in user
foreach ($user in $users) {
    try {
        # Skip only the current logged-in user
        if ($user.Name -ne $currentLoggedInUser) {
            $user | Set-LocalUser -Password $securePassword
            Write-Host "Password for user '$($user.Name)' has been successfully changed."
        } else {
            Write-Host "Skipping currently logged-in user '$($user.Name)' to prevent lockout."
        }
    } catch {
        Write-Host "Failed to change password for user '$($user.Name)'. Error: $_"
    }
}
